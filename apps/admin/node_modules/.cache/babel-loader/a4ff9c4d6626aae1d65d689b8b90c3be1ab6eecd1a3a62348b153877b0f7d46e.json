{"ast":null,"code":"import { createI18n } from 'vue-i18n';\nimport { computed, isRef, reactive } from 'vue';\nimport { getItem, setItem } from '@/utility/storage';\nimport { USERLANGUAGE } from '@/constant';\nimport LK from './languageKeys';\nimport zh from './locale/zh';\nimport en from './locale/en';\nimport elePlusZh from 'element-plus/dist/locale/zh-cn.mjs'; // 中文包\nimport elePlusEn from 'element-plus/dist/locale/en.min.mjs'; // element-plus的英文包\n// 用于注册vue插件\nconst defaultLocale = getItem(USERLANGUAGE) || LK.en;\nexport const I18N = createI18n({\n  legacy: false,\n  globalInjection: true,\n  messages: {\n    [LK.zh]: zh,\n    [LK.en]: en\n  },\n  locale: defaultLocale\n});\n\n// 语言选择的组件会使用到\nexport const langList = [{\n  label: '中文',\n  value: LK.zh\n}, {\n  label: 'english',\n  value: LK.en\n}];\n\n// 自定义$t方法，返回一个计算属性，主要用于解决在js模块中使用t函数生成的语言不具备响应性的问题\n// （具体来说就是使用i18n.locale切换语言时，在js模块中定义的i18n语言不会改变，只有vue模板语法中的才改变）\n// 所以我定义了这么个函数来返回一个计算属性（ref对象），当然在js模块中使用时，你需要记得解包（.value），因为它是一个ref对象.\nI18N.global.$t = function (key) {\n  return computed(() => I18N.global.t(key));\n};\n\n// 获取计算属性的value\nexport function getI18nValue(value) {\n  if (isRef(value)) {\n    return value.value;\n  } else {\n    return value;\n  }\n}\n\n// element-plus国际化\nconst elePlusLangList = {\n  [LK.en]: elePlusEn,\n  [LK.zh]: elePlusZh\n};\n//  element-plus的一个配置对象，在main.js中引入，必须使用reactive包裹\nexport const elementPlusConf = reactive({\n  locale: elePlusLangList[defaultLocale]\n});\n\n// 改变全局的语言,包括本地的和element-plus的\nexport function changeGlobalLanguage(key) {\n  I18N.global.locale.value = key; // 改变本地的语言\n  elementPlusConf.locale = elePlusLangList[key]; // 改变element-plus的语言\n  // 将使用的语言记录到本地存储\n  setItem(USERLANGUAGE, key);\n}\n\n// 用于在js模块中使用i18n.t(),i18n.$t()方法,因为组合式useI18n只能在vue模板中的setup中使用\nexport default I18N.global;","map":{"version":3,"names":["createI18n","computed","isRef","reactive","getItem","setItem","USERLANGUAGE","LK","zh","en","elePlusZh","elePlusEn","defaultLocale","I18N","legacy","globalInjection","messages","locale","langList","label","value","global","$t","key","t","getI18nValue","elePlusLangList","elementPlusConf","changeGlobalLanguage"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/i18n/index.js"],"sourcesContent":["import { createI18n } from 'vue-i18n'\r\nimport { computed, isRef, reactive } from 'vue'\r\nimport { getItem, setItem } from '@/utility/storage'\r\nimport { USERLANGUAGE } from '@/constant'\r\nimport LK from './languageKeys'\r\nimport zh from './locale/zh'\r\nimport en from './locale/en'\r\nimport elePlusZh from 'element-plus/dist/locale/zh-cn.mjs' // 中文包\r\nimport elePlusEn from 'element-plus/dist/locale/en.min.mjs' // element-plus的英文包\r\n// 用于注册vue插件\r\nconst defaultLocale = getItem(USERLANGUAGE) || LK.en\r\nexport const I18N = createI18n({\r\n  legacy: false,\r\n  globalInjection: true,\r\n  messages: {\r\n    [LK.zh]: zh,\r\n    [LK.en]: en\r\n  },\r\n  locale: defaultLocale\r\n})\r\n\r\n// 语言选择的组件会使用到\r\nexport const langList = [\r\n  { label: '中文', value: LK.zh },\r\n  { label: 'english', value: LK.en }\r\n]\r\n\r\n// 自定义$t方法，返回一个计算属性，主要用于解决在js模块中使用t函数生成的语言不具备响应性的问题\r\n// （具体来说就是使用i18n.locale切换语言时，在js模块中定义的i18n语言不会改变，只有vue模板语法中的才改变）\r\n// 所以我定义了这么个函数来返回一个计算属性（ref对象），当然在js模块中使用时，你需要记得解包（.value），因为它是一个ref对象.\r\nI18N.global.$t = function (key) {\r\n  return computed(() => I18N.global.t(key))\r\n}\r\n\r\n// 获取计算属性的value\r\nexport function getI18nValue(value) {\r\n  if (isRef(value)) {\r\n    return value.value\r\n  } else {\r\n    return value\r\n  }\r\n}\r\n\r\n// element-plus国际化\r\nconst elePlusLangList = {\r\n  [LK.en]: elePlusEn,\r\n  [LK.zh]: elePlusZh\r\n}\r\n//  element-plus的一个配置对象，在main.js中引入，必须使用reactive包裹\r\nexport const elementPlusConf = reactive({\r\n  locale: elePlusLangList[defaultLocale]\r\n})\r\n\r\n// 改变全局的语言,包括本地的和element-plus的\r\nexport function changeGlobalLanguage(key) {\r\n  I18N.global.locale.value = key // 改变本地的语言\r\n  elementPlusConf.locale = elePlusLangList[key] // 改变element-plus的语言\r\n  // 将使用的语言记录到本地存储\r\n  setItem(USERLANGUAGE, key)\r\n}\r\n\r\n// 用于在js模块中使用i18n.t(),i18n.$t()方法,因为组合式useI18n只能在vue模板中的setup中使用\r\nexport default I18N.global\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;AACrC,SAASC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,KAAK;AAC/C,SAASC,OAAO,EAAEC,OAAO,QAAQ,mBAAmB;AACpD,SAASC,YAAY,QAAQ,YAAY;AACzC,OAAOC,EAAE,MAAM,gBAAgB;AAC/B,OAAOC,EAAE,MAAM,aAAa;AAC5B,OAAOC,EAAE,MAAM,aAAa;AAC5B,OAAOC,SAAS,MAAM,oCAAoC,EAAC;AAC3D,OAAOC,SAAS,MAAM,qCAAqC,EAAC;AAC5D;AACA,MAAMC,aAAa,GAAGR,OAAO,CAACE,YAAY,CAAC,IAAIC,EAAE,CAACE,EAAE;AACpD,OAAO,MAAMI,IAAI,GAAGb,UAAU,CAAC;EAC7Bc,MAAM,EAAE,KAAK;EACbC,eAAe,EAAE,IAAI;EACrBC,QAAQ,EAAE;IACR,CAACT,EAAE,CAACC,EAAE,GAAGA,EAAE;IACX,CAACD,EAAE,CAACE,EAAE,GAAGA;EACX,CAAC;EACDQ,MAAM,EAAEL;AACV,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,QAAQ,GAAG,CACtB;EAAEC,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAEb,EAAE,CAACC;AAAG,CAAC,EAC7B;EAAEW,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAEb,EAAE,CAACE;AAAG,CAAC,CACnC;;AAED;AACA;AACA;AACAI,IAAI,CAACQ,MAAM,CAACC,EAAE,GAAG,UAAUC,GAAG,EAAE;EAC9B,OAAOtB,QAAQ,CAAC,MAAMY,IAAI,CAACQ,MAAM,CAACG,CAAC,CAACD,GAAG,CAAC,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,SAASE,YAAYA,CAACL,KAAK,EAAE;EAClC,IAAIlB,KAAK,CAACkB,KAAK,CAAC,EAAE;IAChB,OAAOA,KAAK,CAACA,KAAK;EACpB,CAAC,MAAM;IACL,OAAOA,KAAK;EACd;AACF;;AAEA;AACA,MAAMM,eAAe,GAAG;EACtB,CAACnB,EAAE,CAACE,EAAE,GAAGE,SAAS;EAClB,CAACJ,EAAE,CAACC,EAAE,GAAGE;AACX,CAAC;AACD;AACA,OAAO,MAAMiB,eAAe,GAAGxB,QAAQ,CAAC;EACtCc,MAAM,EAAES,eAAe,CAACd,aAAa;AACvC,CAAC,CAAC;;AAEF;AACA,OAAO,SAASgB,oBAAoBA,CAACL,GAAG,EAAE;EACxCV,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAACG,KAAK,GAAGG,GAAG,EAAC;EAC/BI,eAAe,CAACV,MAAM,GAAGS,eAAe,CAACH,GAAG,CAAC,EAAC;EAC9C;EACAlB,OAAO,CAACC,YAAY,EAAEiB,GAAG,CAAC;AAC5B;;AAEA;AACA,eAAeV,IAAI,CAACQ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}