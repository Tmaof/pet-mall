{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { login, getUserInfo, logout } from '@/api/sys';\nimport { setItem, getItem } from '@/utility/storage';\nimport { TOKEN } from '@/constant';\nimport router from '@/router';\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      // 每次刷新页面，vuex的状态就会丢失，需要从本地保存中获取\n      token: getItem(TOKEN) || '',\n      userInfo: null\n    };\n  },\n  mutations: {\n    SET_token(state, payload) {\n      state.token = payload;\n      // 本地持久化存储token\n      setItem(TOKEN, payload);\n    },\n    SET_userInfo(state, payload) {\n      state.userInfo = payload;\n    }\n  },\n  actions: {\n    login({\n      commit\n    }, payload) {\n      return new Promise((resolve, reject) => {\n        login(payload).then(data => {\n          // 登录成功，保存token\n          commit('SET_token', data.token);\n          resolve();\n        }).catch(error => reject(error));\n      });\n    },\n    getUserInfo({\n      commit,\n      dispatch\n    }) {\n      return new Promise((resolve, reject) => {\n        getUserInfo().then(async data => {\n          // 保存用户信息到仓库\n          commit('SET_userInfo', data);\n          // 等待路由计算完成\n          // 启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit。\n          // 若需要在全局命名空间内分发 action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。\n          await dispatch('routes/computedUserRoutes', data.permission.menus, {\n            root: true\n          });\n          resolve(true);\n        }).catch(() => {\n          // eslint-disable-next-line prefer-promise-reject-errors\n          resolve(false);\n        });\n      });\n    },\n    logout({\n      commit,\n      dispatch\n    }) {\n      logout().then(async () => {\n        // 删除token\n        commit('SET_token', '');\n        // 删除用户信息\n        commit('SET_userInfo', null);\n        // 重置vue-router为公有路由表\n        await dispatch('routes/resetToPublicRoutes', null, {\n          root: true\n        });\n        // 跳转登录页\n        router.push('/login');\n      });\n    }\n  },\n  getters: {}\n};","map":{"version":3,"names":["login","getUserInfo","logout","setItem","getItem","TOKEN","router","namespaced","state","token","userInfo","mutations","SET_token","payload","SET_userInfo","actions","commit","Promise","resolve","reject","then","data","catch","error","dispatch","permission","menus","root","push","getters"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/store/modules/user.js"],"sourcesContent":["import { login, getUserInfo, logout } from '@/api/sys'\r\nimport { setItem, getItem } from '@/utility/storage'\r\nimport { TOKEN } from '@/constant'\r\nimport router from '@/router'\r\nexport default {\r\n  namespaced: true,\r\n  state() {\r\n    return {\r\n      // 每次刷新页面，vuex的状态就会丢失，需要从本地保存中获取\r\n      token: getItem(TOKEN) || '',\r\n      userInfo: null\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_token(state, payload) {\r\n      state.token = payload\r\n      // 本地持久化存储token\r\n      setItem(TOKEN, payload)\r\n    },\r\n    SET_userInfo(state, payload) {\r\n      state.userInfo = payload\r\n    }\r\n  },\r\n  actions: {\r\n    login({ commit }, payload) {\r\n      return new Promise((resolve, reject) => {\r\n        login(payload)\r\n          .then((data) => {\r\n            // 登录成功，保存token\r\n            commit('SET_token', data.token)\r\n            resolve()\r\n          })\r\n          .catch((error) => reject(error))\r\n      })\r\n    },\r\n    getUserInfo({ commit, dispatch }) {\r\n      return new Promise((resolve, reject) => {\r\n        getUserInfo()\r\n          .then(async (data) => {\r\n            // 保存用户信息到仓库\r\n            commit('SET_userInfo', data)\r\n            // 等待路由计算完成\r\n            // 启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit。\r\n            // 若需要在全局命名空间内分发 action 或提交 mutation，将 { root: true } 作为第三参数传给 dispatch 或 commit 即可。\r\n            await dispatch('routes/computedUserRoutes', data.permission.menus, {\r\n              root: true\r\n            })\r\n            resolve(true)\r\n          })\r\n          .catch(() => {\r\n            // eslint-disable-next-line prefer-promise-reject-errors\r\n            resolve(false)\r\n          })\r\n      })\r\n    },\r\n    logout({ commit, dispatch }) {\r\n      logout().then(async () => {\r\n        // 删除token\r\n        commit('SET_token', '')\r\n        // 删除用户信息\r\n        commit('SET_userInfo', null)\r\n        // 重置vue-router为公有路由表\r\n        await dispatch('routes/resetToPublicRoutes', null, { root: true })\r\n        // 跳转登录页\r\n        router.push('/login')\r\n      })\r\n    }\r\n  },\r\n  getters: {}\r\n}\r\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,WAAW,EAAEC,MAAM,QAAQ,WAAW;AACtD,SAASC,OAAO,EAAEC,OAAO,QAAQ,mBAAmB;AACpD,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAOC,MAAM,MAAM,UAAU;AAC7B,eAAe;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAKA,CAAA,EAAG;IACN,OAAO;MACL;MACAC,KAAK,EAAEL,OAAO,CAACC,KAAK,CAAC,IAAI,EAAE;MAC3BK,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,SAAS,EAAE;IACTC,SAASA,CAACJ,KAAK,EAAEK,OAAO,EAAE;MACxBL,KAAK,CAACC,KAAK,GAAGI,OAAO;MACrB;MACAV,OAAO,CAACE,KAAK,EAAEQ,OAAO,CAAC;IACzB,CAAC;IACDC,YAAYA,CAACN,KAAK,EAAEK,OAAO,EAAE;MAC3BL,KAAK,CAACE,QAAQ,GAAGG,OAAO;IAC1B;EACF,CAAC;EACDE,OAAO,EAAE;IACPf,KAAKA,CAAC;MAAEgB;IAAO,CAAC,EAAEH,OAAO,EAAE;MACzB,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCnB,KAAK,CAACa,OAAO,CAAC,CACXO,IAAI,CAAEC,IAAI,IAAK;UACd;UACAL,MAAM,CAAC,WAAW,EAAEK,IAAI,CAACZ,KAAK,CAAC;UAC/BS,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAKJ,MAAM,CAACI,KAAK,CAAC,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IACDtB,WAAWA,CAAC;MAAEe,MAAM;MAAEQ;IAAS,CAAC,EAAE;MAChC,OAAO,IAAIP,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtClB,WAAW,CAAC,CAAC,CACVmB,IAAI,CAAC,MAAOC,IAAI,IAAK;UACpB;UACAL,MAAM,CAAC,cAAc,EAAEK,IAAI,CAAC;UAC5B;UACA;UACA;UACA,MAAMG,QAAQ,CAAC,2BAA2B,EAAEH,IAAI,CAACI,UAAU,CAACC,KAAK,EAAE;YACjEC,IAAI,EAAE;UACR,CAAC,CAAC;UACFT,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC,CACDI,KAAK,CAAC,MAAM;UACX;UACAJ,OAAO,CAAC,KAAK,CAAC;QAChB,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC;IACDhB,MAAMA,CAAC;MAAEc,MAAM;MAAEQ;IAAS,CAAC,EAAE;MAC3BtB,MAAM,CAAC,CAAC,CAACkB,IAAI,CAAC,YAAY;QACxB;QACAJ,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;QACvB;QACAA,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC;QAC5B;QACA,MAAMQ,QAAQ,CAAC,4BAA4B,EAAE,IAAI,EAAE;UAAEG,IAAI,EAAE;QAAK,CAAC,CAAC;QAClE;QACArB,MAAM,CAACsB,IAAI,CAAC,QAAQ,CAAC;MACvB,CAAC,CAAC;IACJ;EACF,CAAC;EACDC,OAAO,EAAE,CAAC;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}