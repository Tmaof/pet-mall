{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as XLSX from 'xlsx/xlsx.mjs';\nexport async function parseExcel(file) {\n  return new Promise((resolve, reject) => {\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\n    const reader = new FileReader();\n    // 该事件在读取操作完成时触发\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/onload\n    reader.onload = e => {\n      // 1. 获取解析到的数据\n      const data = e.target.result;\n      // 2. 利用 XLSX 对数据进行解析\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      // 3. 获取第一张表格(工作簿)名称\n      const firstSheetName = workbook.SheetNames[0];\n      // 4. 只读取 Sheet1（第一张表格）的数据\n      const worksheet = workbook.Sheets[firstSheetName];\n      // 5. 解析数据表头\n      const header = getHeaderRow(worksheet);\n      // 6. 解析数据体\n      const results = XLSX.utils.sheet_to_json(worksheet);\n      // 7. 传入解析之后的数据\n      resolve({\n        header,\n        results\n      });\n    };\n    // 启动读取指定的 Blob 或 File 内容\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\r\n * 获取表头（通用方式）\r\n */\nconst getHeaderRow = sheet => {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet['!ref']);\n  let C;\n  const R = range.s.r;\n  /* start in the first row */\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    const cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    /* find the cell in the first row */\n    let hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n};\nexport const isExcel = file => {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n};","map":{"version":3,"names":["XLSX","parseExcel","file","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","header","getHeaderRow","results","utils","sheet_to_json","readAsArrayBuffer","sheet","headers","range","decode_range","C","R","s","r","c","cell","encode_cell","hdr","t","format_cell","push","isExcel","test","name"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/components/UploadExcel/utility.js"],"sourcesContent":["import * as XLSX from 'xlsx/xlsx.mjs'\r\n\r\nexport async function parseExcel(file) {\r\n  return new Promise((resolve, reject) => {\r\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\r\n    const reader = new FileReader()\r\n    // 该事件在读取操作完成时触发\r\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader/onload\r\n    reader.onload = (e) => {\r\n      // 1. 获取解析到的数据\r\n      const data = e.target.result\r\n      // 2. 利用 XLSX 对数据进行解析\r\n      const workbook = XLSX.read(data, { type: 'array' })\r\n      // 3. 获取第一张表格(工作簿)名称\r\n      const firstSheetName = workbook.SheetNames[0]\r\n      // 4. 只读取 Sheet1（第一张表格）的数据\r\n      const worksheet = workbook.Sheets[firstSheetName]\r\n      // 5. 解析数据表头\r\n      const header = getHeaderRow(worksheet)\r\n      // 6. 解析数据体\r\n      const results = XLSX.utils.sheet_to_json(worksheet)\r\n      // 7. 传入解析之后的数据\r\n      resolve({ header, results })\r\n    }\r\n    // 启动读取指定的 Blob 或 File 内容\r\n    reader.readAsArrayBuffer(file)\r\n  })\r\n}\r\n\r\n/**\r\n * 获取表头（通用方式）\r\n */\r\nconst getHeaderRow = (sheet) => {\r\n  const headers = []\r\n  const range = XLSX.utils.decode_range(sheet['!ref'])\r\n  let C\r\n  const R = range.s.r\r\n  /* start in the first row */\r\n  for (C = range.s.c; C <= range.e.c; ++C) {\r\n    /* walk every column in the range */\r\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n    /* find the cell in the first row */\r\n    let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n    headers.push(hdr)\r\n  }\r\n  return headers\r\n}\r\n\r\nexport const isExcel = (file) => {\r\n  return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n}\r\n"],"mappings":";AAAA,OAAO,KAAKA,IAAI,MAAM,eAAe;AAErC,OAAO,eAAeC,UAAUA,CAACC,IAAI,EAAE;EACrC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/B;IACA;IACAD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB;MACA,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;MAC5B;MACA,MAAMC,QAAQ,GAAGb,IAAI,CAACc,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD;MACA,MAAMC,cAAc,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;MAC7C;MACA,MAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAACH,cAAc,CAAC;MACjD;MACA,MAAMI,MAAM,GAAGC,YAAY,CAACH,SAAS,CAAC;MACtC;MACA,MAAMI,OAAO,GAAGtB,IAAI,CAACuB,KAAK,CAACC,aAAa,CAACN,SAAS,CAAC;MACnD;MACAd,OAAO,CAAC;QAAEgB,MAAM;QAAEE;MAAQ,CAAC,CAAC;IAC9B,CAAC;IACD;IACAhB,MAAM,CAACmB,iBAAiB,CAACvB,IAAI,CAAC;EAChC,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA,MAAMmB,YAAY,GAAIK,KAAK,IAAK;EAC9B,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAG5B,IAAI,CAACuB,KAAK,CAACM,YAAY,CAACH,KAAK,CAAC,MAAM,CAAC,CAAC;EACpD,IAAII,CAAC;EACL,MAAMC,CAAC,GAAGH,KAAK,CAACI,CAAC,CAACC,CAAC;EACnB;EACA,KAAKH,CAAC,GAAGF,KAAK,CAACI,CAAC,CAACE,CAAC,EAAEJ,CAAC,IAAIF,KAAK,CAACnB,CAAC,CAACyB,CAAC,EAAE,EAAEJ,CAAC,EAAE;IACvC;IACA,MAAMK,IAAI,GAAGT,KAAK,CAAC1B,IAAI,CAACuB,KAAK,CAACa,WAAW,CAAC;MAAEF,CAAC,EAAEJ,CAAC;MAAEG,CAAC,EAAEF;IAAE,CAAC,CAAC,CAAC;IAC1D;IACA,IAAIM,GAAG,GAAG,UAAU,GAAGP,CAAC,EAAC;IACzB,IAAIK,IAAI,IAAIA,IAAI,CAACG,CAAC,EAAED,GAAG,GAAGrC,IAAI,CAACuB,KAAK,CAACgB,WAAW,CAACJ,IAAI,CAAC;IACtDR,OAAO,CAACa,IAAI,CAACH,GAAG,CAAC;EACnB;EACA,OAAOV,OAAO;AAChB,CAAC;AAED,OAAO,MAAMc,OAAO,GAAIvC,IAAI,IAAK;EAC/B,OAAO,mBAAmB,CAACwC,IAAI,CAACxC,IAAI,CAACyC,IAAI,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}