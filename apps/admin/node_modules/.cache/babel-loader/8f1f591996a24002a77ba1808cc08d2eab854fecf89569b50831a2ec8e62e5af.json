{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport publicRoutes, { privateRoutes } from '@/router/routes';\nimport router from '@/router';\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      // state.routes主要用于：侧边栏渲染，页面搜索，\n      routes: [],\n      userPrivateRoutes: []\n    };\n  },\n  mutations: {\n    SET_routes(state, payload) {\n      state.routes = payload;\n    },\n    SET_userPrivateRoutes(state, payload) {\n      state.userPrivateRoutes = payload;\n    }\n  },\n  actions: {\n    computedUserRoutes({\n      commit\n    }, menus) {\n      return new Promise((resolve, reject) => {\n        // 根据户信息计算出用户所拥有的路由表\n        const userPrivateRoutes = getUserPrivateRoutes(privateRoutes(), menus);\n        // 将计算出的私有路由表添加到vue-router\n        addRoutes(userPrivateRoutes);\n        // 将用户拥有的私有路由与公有路由合并，保存到state.routes\n        // state.routes主要用于：侧边栏渲染，页面搜索，\n        commit('SET_routes', [...publicRoutes(), ...userPrivateRoutes]);\n        commit('SET_userPrivateRoutes', userPrivateRoutes);\n        resolve();\n      });\n    },\n    resetToPublicRoutes({\n      state\n    }) {\n      return new Promise(resolve => {\n        resetToPublicRoutes(state.userPrivateRoutes);\n        resolve();\n      });\n    }\n  }\n};\n\n/**\r\n * 根据户信息计算出用户所拥有的路由表\r\n * @param {*} flatPrivateRoutes\r\n * @param {*} menus\r\n */\nfunction getUserPrivateRoutes(privateRoutes, menus) {\n  // 不要在数组迭代中删除数组该数组中元素\n  const newList = [...privateRoutes];\n  newList.forEach(route => {\n    // 从子路由开始向上遍历\n    if (route.children && route.children.length) {\n      getUserPrivateRoutes(route.children, menus);\n    }\n    if (!(route.children && route.children.length)) {\n      // 因为先过滤的子路由\n      // 如果过滤后，该路由还有子路由，不管你有没有该路由页面权限，都应该保留，否则看不到（不能添加到vue-router）子路由\n      // 如果没有子路由，我就要看看是否过滤该路由\n      const exist = menus.includes(route.name);\n      if (!exist) {\n        privateRoutes.splice(privateRoutes.indexOf(route), 1);\n      }\n    }\n  });\n  return privateRoutes;\n}\n\n/**\r\n * 将计算出的私有路由表添加到vue-router\r\n * @param {*} routes\r\n */\nfunction addRoutes(routes) {\n  function auxiliaryFunc(routes, parentName) {\n    for (const route of routes) {\n      if (!route.name) {\n        // 如果父路由没有name,则随机生成一个name,用于添加嵌套路由\n        // 注意,name 不能是数值\n        route.name = Date.now().toString();\n      }\n      // 添加嵌套路由\n      // https://router.vuejs.org/zh/guide/advanced/dynamic-routing.html#%E6%B7%BB%E5%8A%A0%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\n      if (parentName) {\n        router.addRoute(parentName, route);\n      } else {\n        router.addRoute(route);\n      }\n      // 先添加父路由再添加子路由\n      if (route.children && route.children.length) {\n        auxiliaryFunc(route.children, route.name);\n      }\n    }\n  }\n  auxiliaryFunc(routes, undefined);\n}\n\n/**\r\n * 将用户的私有路由删除,来实现重置为公有路由表\r\n * @param {*} userPrivateRoutes\r\n */\nfunction resetToPublicRoutes(userPrivateRoutes) {\n  for (const route of userPrivateRoutes) {\n    // 当路由被删除时，所有的别名和子路由也会被同时删除\n    // https://router.vuejs.org/zh/guide/advanced/dynamic-routing.html#%E5%88%A0%E9%99%A4%E8%B7%AF%E7%94%B1\n    router.removeRoute(route.name);\n  }\n}","map":{"version":3,"names":["publicRoutes","privateRoutes","router","namespaced","state","routes","userPrivateRoutes","mutations","SET_routes","payload","SET_userPrivateRoutes","actions","computedUserRoutes","commit","menus","Promise","resolve","reject","getUserPrivateRoutes","addRoutes","resetToPublicRoutes","newList","forEach","route","children","length","exist","includes","name","splice","indexOf","auxiliaryFunc","parentName","Date","now","toString","addRoute","undefined","removeRoute"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/store/modules/routes.js"],"sourcesContent":["import publicRoutes, { privateRoutes } from '@/router/routes'\r\nimport router from '@/router'\r\nexport default {\r\n  namespaced: true,\r\n  state() {\r\n    return {\r\n      // state.routes主要用于：侧边栏渲染，页面搜索，\r\n      routes: [],\r\n      userPrivateRoutes: []\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_routes(state, payload) {\r\n      state.routes = payload\r\n    },\r\n    SET_userPrivateRoutes(state, payload) {\r\n      state.userPrivateRoutes = payload\r\n    }\r\n  },\r\n  actions: {\r\n    computedUserRoutes({ commit }, menus) {\r\n      return new Promise((resolve, reject) => {\r\n        // 根据户信息计算出用户所拥有的路由表\r\n        const userPrivateRoutes = getUserPrivateRoutes(privateRoutes(), menus)\r\n        // 将计算出的私有路由表添加到vue-router\r\n        addRoutes(userPrivateRoutes)\r\n        // 将用户拥有的私有路由与公有路由合并，保存到state.routes\r\n        // state.routes主要用于：侧边栏渲染，页面搜索，\r\n        commit('SET_routes', [...publicRoutes(), ...userPrivateRoutes])\r\n        commit('SET_userPrivateRoutes', userPrivateRoutes)\r\n        resolve()\r\n      })\r\n    },\r\n    resetToPublicRoutes({ state }) {\r\n      return new Promise((resolve) => {\r\n        resetToPublicRoutes(state.userPrivateRoutes)\r\n        resolve()\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 根据户信息计算出用户所拥有的路由表\r\n * @param {*} flatPrivateRoutes\r\n * @param {*} menus\r\n */\r\nfunction getUserPrivateRoutes(privateRoutes, menus) {\r\n  // 不要在数组迭代中删除数组该数组中元素\r\n  const newList = [...privateRoutes]\r\n  newList.forEach((route) => {\r\n    // 从子路由开始向上遍历\r\n    if (route.children && route.children.length) {\r\n      getUserPrivateRoutes(route.children, menus)\r\n    }\r\n\r\n    if (!(route.children && route.children.length)) {\r\n      // 因为先过滤的子路由\r\n      // 如果过滤后，该路由还有子路由，不管你有没有该路由页面权限，都应该保留，否则看不到（不能添加到vue-router）子路由\r\n      // 如果没有子路由，我就要看看是否过滤该路由\r\n      const exist = menus.includes(route.name)\r\n      if (!exist) {\r\n        privateRoutes.splice(privateRoutes.indexOf(route), 1)\r\n      }\r\n    }\r\n  })\r\n  return privateRoutes\r\n}\r\n\r\n/**\r\n * 将计算出的私有路由表添加到vue-router\r\n * @param {*} routes\r\n */\r\nfunction addRoutes(routes) {\r\n  function auxiliaryFunc(routes, parentName) {\r\n    for (const route of routes) {\r\n      if (!route.name) {\r\n        // 如果父路由没有name,则随机生成一个name,用于添加嵌套路由\r\n        // 注意,name 不能是数值\r\n        route.name = Date.now().toString()\r\n      }\r\n      // 添加嵌套路由\r\n      // https://router.vuejs.org/zh/guide/advanced/dynamic-routing.html#%E6%B7%BB%E5%8A%A0%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\r\n      if (parentName) {\r\n        router.addRoute(parentName, route)\r\n      } else {\r\n        router.addRoute(route)\r\n      }\r\n      // 先添加父路由再添加子路由\r\n      if (route.children && route.children.length) {\r\n        auxiliaryFunc(route.children, route.name)\r\n      }\r\n    }\r\n  }\r\n  auxiliaryFunc(routes, undefined)\r\n}\r\n\r\n/**\r\n * 将用户的私有路由删除,来实现重置为公有路由表\r\n * @param {*} userPrivateRoutes\r\n */\r\nfunction resetToPublicRoutes(userPrivateRoutes) {\r\n  for (const route of userPrivateRoutes) {\r\n    // 当路由被删除时，所有的别名和子路由也会被同时删除\r\n    // https://router.vuejs.org/zh/guide/advanced/dynamic-routing.html#%E5%88%A0%E9%99%A4%E8%B7%AF%E7%94%B1\r\n    router.removeRoute(route.name)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}