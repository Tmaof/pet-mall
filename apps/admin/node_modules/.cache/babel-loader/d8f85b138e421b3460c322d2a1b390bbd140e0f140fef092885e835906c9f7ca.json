{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport i18n from '@/i18n';\nimport { getUserListAll } from '@/api/user-manage';\nimport { keys } from '../constant.js';\nimport { dateFilter } from '@/filter';\n// eslint-disable-next-line camelcase\nimport export_json_to_excel from '@/utility/export2Excel.js';\nexport default async function exportExcel() {\n  const {\n    list\n  } = await getUserListAll();\n  const data = formatJson(keys, list);\n  export_json_to_excel({\n    // excel 表头\n    header: Object.keys(keys),\n    // excel 数据（二维数组结构）\n    data,\n    // 文件名称\n    filename: i18n.$t('hooks.exportExcel.017834-0'),\n    // 是否自动列宽\n    autoWidth: true,\n    // 文件类型\n    bookType: 'xlsx'\n  });\n}\n\n/**\r\n *  该方法负责将数组转化成二维数组\r\n * @param {*} headers\r\n * @param {*} rows\r\n * @returns\r\n */\nconst formatJson = (headers, rows) => {\n  // 首先遍历数组\n  // [{ username: '张三'},{},{}]  => [['张三'],[],[]]\n  return rows.map(item => {\n    return Object.keys(headers).map(key => {\n      // 角色特殊处理\n      if (headers[key] === 'role') {\n        item.role = item.role.map(role => role.title);\n        item.role = item.role.toString();\n      }\n      // 处理时间格式\n      if (headers[key] === 'openTime') {\n        item.openTime = dateFilter(item.openTime);\n      }\n      return item[headers[key]];\n    });\n  });\n};","map":{"version":3,"names":["i18n","getUserListAll","keys","dateFilter","export_json_to_excel","exportExcel","list","data","formatJson","header","Object","filename","$t","autoWidth","bookType","headers","rows","map","item","key","role","title","toString","openTime"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/views/Acl/User/hooks/exportExcel.js"],"sourcesContent":["import i18n from '@/i18n'\r\nimport { getUserListAll } from '@/api/user-manage'\r\nimport { keys } from '../constant.js'\r\nimport { dateFilter } from '@/filter'\r\n// eslint-disable-next-line camelcase\r\nimport export_json_to_excel from '@/utility/export2Excel.js'\r\nexport default async function exportExcel() {\r\n  const { list } = await getUserListAll()\r\n  const data = formatJson(keys, list)\r\n  export_json_to_excel({\r\n    // excel 表头\r\n    header: Object.keys(keys),\r\n    // excel 数据（二维数组结构）\r\n    data,\r\n    // 文件名称\r\n    filename: i18n.$t('hooks.exportExcel.017834-0'),\r\n    // 是否自动列宽\r\n    autoWidth: true,\r\n    // 文件类型\r\n    bookType: 'xlsx'\r\n  })\r\n}\r\n\r\n/**\r\n *  该方法负责将数组转化成二维数组\r\n * @param {*} headers\r\n * @param {*} rows\r\n * @returns\r\n */\r\nconst formatJson = (headers, rows) => {\r\n  // 首先遍历数组\r\n  // [{ username: '张三'},{},{}]  => [['张三'],[],[]]\r\n  return rows.map((item) => {\r\n    return Object.keys(headers).map((key) => {\r\n      // 角色特殊处理\r\n      if (headers[key] === 'role') {\r\n        item.role = item.role.map((role) => role.title)\r\n        item.role = item.role.toString()\r\n      }\r\n      // 处理时间格式\r\n      if (headers[key] === 'openTime') {\r\n        item.openTime = dateFilter(item.openTime)\r\n      }\r\n      return item[headers[key]]\r\n    })\r\n  })\r\n}\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,IAAI,QAAQ,gBAAgB;AACrC,SAASC,UAAU,QAAQ,UAAU;AACrC;AACA,OAAOC,oBAAoB,MAAM,2BAA2B;AAC5D,eAAe,eAAeC,WAAWA,CAAA,EAAG;EAC1C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAML,cAAc,CAAC,CAAC;EACvC,MAAMM,IAAI,GAAGC,UAAU,CAACN,IAAI,EAAEI,IAAI,CAAC;EACnCF,oBAAoB,CAAC;IACnB;IACAK,MAAM,EAAEC,MAAM,CAACR,IAAI,CAACA,IAAI,CAAC;IACzB;IACAK,IAAI;IACJ;IACAI,QAAQ,EAAEX,IAAI,CAACY,EAAE,CAAC,4BAA4B,CAAC;IAC/C;IACAC,SAAS,EAAE,IAAI;IACf;IACAC,QAAQ,EAAE;EACZ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMN,UAAU,GAAGA,CAACO,OAAO,EAAEC,IAAI,KAAK;EACpC;EACA;EACA,OAAOA,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;IACxB,OAAOR,MAAM,CAACR,IAAI,CAACa,OAAO,CAAC,CAACE,GAAG,CAAEE,GAAG,IAAK;MACvC;MACA,IAAIJ,OAAO,CAACI,GAAG,CAAC,KAAK,MAAM,EAAE;QAC3BD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI,CAACH,GAAG,CAAEG,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC;QAC/CH,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI,CAACE,QAAQ,CAAC,CAAC;MAClC;MACA;MACA,IAAIP,OAAO,CAACI,GAAG,CAAC,KAAK,UAAU,EAAE;QAC/BD,IAAI,CAACK,QAAQ,GAAGpB,UAAU,CAACe,IAAI,CAACK,QAAQ,CAAC;MAC3C;MACA,OAAOL,IAAI,CAACH,OAAO,CAACI,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}