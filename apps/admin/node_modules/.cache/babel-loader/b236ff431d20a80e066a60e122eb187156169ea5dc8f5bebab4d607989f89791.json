{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nconst serve = axios.create({\n  baseURL: process.env.VUE_APP_baseUrl,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nserve.interceptors.request.use(config => {\n  // 如果有token，则在请求头中进行携带,方便进行用户鉴权\n  if (store.getters.token) {\n    config.headers.Authorization = 'Bearer ' + store.getters.token;\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  ElMessage.error({\n    message: error.message\n  });\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nserve.interceptors.response.use(response => {\n  // 2xx 范围的状态码都会触发该函数。\n  const {\n    success,\n    message,\n    data\n  } = response.data;\n  if (success) {\n    // 直接返回数据\n    console.log('res:', response.data);\n    return data;\n  } else {\n    // 响应成功，但是后端业务逻辑处理失败\n    ElMessage.error({\n      message\n    });\n    // return Promise.reject(message)\n  }\n}, error => {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  const {\n    message\n  } = error.response.data;\n  ElMessage.error({\n    message: message || error.message\n  });\n  return Promise.reject(error);\n});\nexport default serve;","map":{"version":3,"names":["axios","ElMessage","store","serve","create","baseURL","process","env","VUE_APP_baseUrl","timeout","headers","interceptors","request","use","config","getters","token","Authorization","error","message","Promise","reject","response","success","data","console","log"],"sources":["D:/myproject/毕业设计/pet-mall/apps/admin/src/utility/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nconst serve = axios.create({\r\n  baseURL: process.env.VUE_APP_baseUrl,\r\n  timeout: 10000,\r\n  headers: { 'Content-Type': 'application/json' }\r\n})\r\n\r\n// 请求拦截器\r\nserve.interceptors.request.use(\r\n  (config) => {\r\n    // 如果有token，则在请求头中进行携带,方便进行用户鉴权\r\n    if (store.getters.token) {\r\n      config.headers.Authorization = 'Bearer ' + store.getters.token\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    // 对请求错误做些什么\r\n    ElMessage.error({ message: error.message })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nserve.interceptors.response.use(\r\n  (response) => {\r\n    // 2xx 范围的状态码都会触发该函数。\r\n    const { success, message, data } = response.data\r\n    if (success) {\r\n      // 直接返回数据\r\n      console.log('res:', response.data)\r\n      return data\r\n    } else {\r\n      // 响应成功，但是后端业务逻辑处理失败\r\n      ElMessage.error({ message })\r\n      // return Promise.reject(message)\r\n    }\r\n  },\r\n  (error) => {\r\n    // 超出 2xx 范围的状态码都会触发该函数。\r\n    // 对响应错误做点什么\r\n    const { message } = error.response.data\r\n    ElMessage.error({ message: message || error.message })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default serve\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;EACpCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;;AAEF;AACAP,KAAK,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV;EACA,IAAIZ,KAAK,CAACa,OAAO,CAACC,KAAK,EAAE;IACvBF,MAAM,CAACJ,OAAO,CAACO,aAAa,GAAG,SAAS,GAAGf,KAAK,CAACa,OAAO,CAACC,KAAK;EAChE;EACA,OAAOF,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT;EACAjB,SAAS,CAACiB,KAAK,CAAC;IAAEC,OAAO,EAAED,KAAK,CAACC;EAAQ,CAAC,CAAC;EAC3C,OAAOC,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,KAAK,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC5BS,QAAQ,IAAK;EACZ;EACA,MAAM;IAAEC,OAAO;IAAEJ,OAAO;IAAEK;EAAK,CAAC,GAAGF,QAAQ,CAACE,IAAI;EAChD,IAAID,OAAO,EAAE;IACX;IACAE,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEJ,QAAQ,CAACE,IAAI,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,MAAM;IACL;IACAvB,SAAS,CAACiB,KAAK,CAAC;MAAEC;IAAQ,CAAC,CAAC;IAC5B;EACF;AACF,CAAC,EACAD,KAAK,IAAK;EACT;EACA;EACA,MAAM;IAAEC;EAAQ,CAAC,GAAGD,KAAK,CAACI,QAAQ,CAACE,IAAI;EACvCvB,SAAS,CAACiB,KAAK,CAAC;IAAEC,OAAO,EAAEA,OAAO,IAAID,KAAK,CAACC;EAAQ,CAAC,CAAC;EACtD,OAAOC,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}